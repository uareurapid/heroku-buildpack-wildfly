#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -e

BP_DIR=$(cd $(dirname $0)/..; pwd) # absolute path
BIN_DIR=$BP_DIR/bin

# parse args
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

JVM_COMMON_BUILDPACK=${JVM_COMMON_BUILDPACK:-"https://codon-buildpacks.s3.amazonaws.com/buildpacks/heroku/jvm-common.tgz"}
mkdir -p /tmp/jvm-common
curl --retry 3 --silent --location $JVM_COMMON_BUILDPACK | tar xzm -C /tmp/jvm-common --strip-components=1
. /tmp/jvm-common/bin/util
. /tmp/jvm-common/bin/java

install_java_with_overlay ${BUILD_DIR}

WILDFLY_VERSION="10.1.0.Final"
WILDFLY_SHA1="9ee3c0255e2e6007d502223916cefad2a1a5e333"
JBOSS_HOME=".jboss/wildfly-${WILDFLY_VERSION}"

cd $BUILD_DIR

mkdir -p .jboss

echo -n "-----> Installing Wildfly ${WILDFLY_VERSION}... "
curl --retry 3 -s -O https://download.jboss.org/wildfly/$WILDFLY_VERSION/wildfly-$WILDFLY_VERSION.tar.gz
sha1sum wildfly-$WILDFLY_VERSION.tar.gz | grep $WILDFLY_SHA1 > /dev/null 2>&1
tar xf wildfly-$WILDFLY_VERSION.tar.gz
mv wildfly-$WILDFLY_VERSION $JBOSS_HOME
rm wildfly-$WILDFLY_VERSION.tar.gz
echo "done JBOSS_HOME --> $JBOSS_HOME"

OUTPUT="$(ls -al)"
echo "${OUTPUT}"


echo "---------------------------------"
echo "downloading postgresql driver..."
curl --retry 3 -s -O https://jdbc.postgresql.org/download/postgresql-42.1.1.jar

TMP_POSTGRESQL_DIR="tmp_drivers"
mkdir -p $TMP_POSTGRESQL_DIR

echo "copying driver to temporary working dir $TMP_POSTGRESQL_DIR"
#------------ now install the driver ---------

mv postgresql-42.1.1.jar $TMP_POSTGRESQL_DIR
#install postgres driver wildfly

JBOSS_CLI_FILE="./install_postgresql_module.cli"

echo "checking content of $JBOSS_CLI_FILE"
cat $JBOSS_CLI_FILE

echo "start server for module installation via console... on port 8080"
#send it to the background and own the shell, yahhh!!
nohup $JBOSS_HOME/bin/standalone.sh -b=0.0.0.0 -Djboss.http.port=8080 &

#wait a little bit
sleep 15s

echo "installing the postgresql as a wildfly module"
$JBOSS_HOME/bin/jboss-cli.sh --file=$JBOSS_CLI_FILE
echo "done"

#clean temp dir
rm -rf $TMP_POSTGRESQL_DIR

echo "stopping the server again for war deployment"
$JBOSS_HOME/bin/jboss-cli.sh --connect command=:shutdown


# If config var GMAIL_USERNAME and GMAIL_PASSWORD exists, take its content and replace them on the template
if [[ -f "$ENV_DIR/GMAIL_USERNAME" ]] && [[ -f "$ENV_DIR/GMAIL_PASSWORD" ]]; then
	#vars for sending emails
	GMAIL_USERNAME=$(cat "$ENV_DIR/GMAIL_USERNAME")
	GMAIL_PASSWORD=$(cat "$ENV_DIR/GMAIL_PASSWORD")
	#use gmail to send emails
	echo "replacing standalone.xml email configuration...$GMAIL_USERNAME $GMAIL_PASSWORD..."
	./replace_email_config.sh $JBOSS_HOME/standalone/configuration/standalone.xml $GMAIL_USERNAME $GMAIL_PASSWORD
fi

echo -n "-----> Deploying war file(s)... "
cp target/*.war $JBOSS_HOME/standalone/deployments/
echo "done"

JBOSS_LOG_MANAGER_LIB="$(echo $JBOSS_HOME/modules/system/layers/base/org/jboss/logmanager/main/jboss-logmanager-*.jar)"
# -Xbootclasspath/p:$JBOSS_LOG_MANAGER_LIB -Djboss.modules.system.pkgs=org.jboss.byteman,org.jboss.logmanager -Djava.util.logging.manager=org.jboss.logmanager.LogManager

echo "-----> Creating configuration (or executing Procfile if exists)..."
if [ -f $BUILD_DIR/Procfile ]; then
  echo "- Using existing process types"
  #try manual start (was not working with the procfile)
 echo "try restart the server manually..."
 $JBOSS_HOME/bin/standalone.sh -b=0.0.0.0 -Djboss.http.port=8080
 echo "done!"
#$JBOSS_HOME/bin/standalone.sh -b=0.0.0.0 -Djboss.http.port=8080
else
  cat << EOF > $BUILD_DIR/Procfile
web: \$JBOSS_HOME/bin/standalone.sh -b=0.0.0.0 -Djboss.http.port=\$PORT -Xbootclasspath/p:$JBOSS_LOG_MANAGER_LIB -Djboss.modules.system.pkgs=org.jboss.byteman,org.jboss.logmanager -Djava.util.logging.manager=org.jboss.logmanager.LogManager
EOF
fi

cat << EOF > $BUILD_DIR/.profile.d/jboss.sh
export JBOSS_HOME=${JBOSS_HOME}
EOF
